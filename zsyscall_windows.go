// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moddwmapi = windows.NewLazySystemDLL("dwmapi.dll")
	moduser32 = windows.NewLazySystemDLL("user32.dll")

	procDwmGetWindowAttribute    = moddwmapi.NewProc("DwmGetWindowAttribute")
	procBeginDeferWindowPos      = moduser32.NewProc("BeginDeferWindowPos")
	procChangeDisplaySettingsExW = moduser32.NewProc("ChangeDisplaySettingsExW")
	procDeferWindowPos           = moduser32.NewProc("DeferWindowPos")
	procEndDeferWindowPos        = moduser32.NewProc("EndDeferWindowPos")
	procEnumDisplayDevicesW      = moduser32.NewProc("EnumDisplayDevicesW")
	procEnumDisplaySettingsW     = moduser32.NewProc("EnumDisplaySettingsW")
	procGetForegroundWindow      = moduser32.NewProc("GetForegroundWindow")
	procGetShellWindow           = moduser32.NewProc("GetShellWindow")
	procGetTopWindow             = moduser32.NewProc("GetTopWindow")
	procGetWindow                = moduser32.NewProc("GetWindow")
	procGetWindowRect            = moduser32.NewProc("GetWindowRect")
	procGetWindowTextLengthW     = moduser32.NewProc("GetWindowTextLengthW")
	procGetWindowTextW           = moduser32.NewProc("GetWindowTextW")
	procIsIconic                 = moduser32.NewProc("IsIconic")
	procIsWindowVisible          = moduser32.NewProc("IsWindowVisible")
)

func DwmGetWindowAttribute(hWnd windows.HWND, dwAttribute uint32, pvAttribute unsafe.Pointer, cbAttribute uint32) (hResult int) {
	r0, _, _ := syscall.Syscall6(procDwmGetWindowAttribute.Addr(), 4, uintptr(hWnd), uintptr(dwAttribute), uintptr(pvAttribute), uintptr(cbAttribute), 0, 0)
	hResult = int(r0)
	return
}

func BeginDeferWindowPos(numWindows int) (winPosInfo windows.HWND) {
	r0, _, _ := syscall.Syscall(procBeginDeferWindowPos.Addr(), 1, uintptr(numWindows), 0, 0)
	winPosInfo = windows.HWND(r0)
	return
}

func ChangeDisplaySettingsEx(lpszDeviceName *uint16, lpDevMode *DEVMODEW, hWnd windows.HWND, dwFlags uint32, lParam uintptr) (dispChange int) {
	r0, _, _ := syscall.Syscall6(procChangeDisplaySettingsExW.Addr(), 5, uintptr(unsafe.Pointer(lpszDeviceName)), uintptr(unsafe.Pointer(lpDevMode)), uintptr(hWnd), uintptr(dwFlags), uintptr(lParam), 0)
	dispChange = int(r0)
	return
}

func DeferWindowPos(hdwp windows.HWND, hWnd windows.HWND, hWndInsertAfter windows.HWND, x int, y int, cx int, cy int, flags uint32) (winPosInfo windows.HWND) {
	r0, _, _ := syscall.Syscall9(procDeferWindowPos.Addr(), 8, uintptr(hdwp), uintptr(hWnd), uintptr(hWndInsertAfter), uintptr(x), uintptr(y), uintptr(cx), uintptr(cy), uintptr(flags), 0)
	winPosInfo = windows.HWND(r0)
	return
}

func EndDeferWindowPos(hdwp windows.HWND) (result bool) {
	r0, _, _ := syscall.Syscall(procEndDeferWindowPos.Addr(), 1, uintptr(hdwp), 0, 0)
	result = r0 != 0
	return
}

func EnumDisplayDevices(lpDevice *uint16, iDevNum uint32, lpDisplayDevice *DISPLAY_DEVICE, dwFlags uint32) (numChars uint32, err error) {
	r0, _, e1 := syscall.Syscall6(procEnumDisplayDevicesW.Addr(), 4, uintptr(unsafe.Pointer(lpDevice)), uintptr(iDevNum), uintptr(unsafe.Pointer(lpDisplayDevice)), uintptr(dwFlags), 0, 0)
	numChars = uint32(r0)
	if numChars == 0 {
		err = errnoErr(e1)
	}
	return
}

func EnumDisplaySettings(lpszDeviceName *uint16, iModeNum int32, lpDevMode *DEVMODEW) (numChars uint32, err error) {
	r0, _, e1 := syscall.Syscall(procEnumDisplaySettingsW.Addr(), 3, uintptr(unsafe.Pointer(lpszDeviceName)), uintptr(iModeNum), uintptr(unsafe.Pointer(lpDevMode)))
	numChars = uint32(r0)
	if numChars == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetForegroundWindow() (hWnd windows.HWND) {
	r0, _, _ := syscall.Syscall(procGetForegroundWindow.Addr(), 0, 0, 0, 0)
	hWnd = windows.HWND(r0)
	return
}

func GetShellWindow() (hWnd windows.HWND) {
	r0, _, _ := syscall.Syscall(procGetShellWindow.Addr(), 0, 0, 0, 0)
	hWnd = windows.HWND(r0)
	return
}

func GetTopWindow(hWnd windows.HWND) (hWndTarget windows.HWND) {
	r0, _, _ := syscall.Syscall(procGetTopWindow.Addr(), 1, uintptr(hWnd), 0, 0)
	hWndTarget = windows.HWND(r0)
	return
}

func GetWindow(hWnd windows.HWND, cmd uint) (hWndTarget windows.HWND) {
	r0, _, _ := syscall.Syscall(procGetWindow.Addr(), 2, uintptr(hWnd), uintptr(cmd), 0)
	hWndTarget = windows.HWND(r0)
	return
}

func GetWindowRect(hWnd windows.HWND, rect *RECT) (numChars uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetWindowRect.Addr(), 2, uintptr(hWnd), uintptr(unsafe.Pointer(rect)), 0)
	numChars = uint32(r0)
	if numChars == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetWindowTextLength(hWnd windows.HWND) (length int) {
	r0, _, _ := syscall.Syscall(procGetWindowTextLengthW.Addr(), 1, uintptr(hWnd), 0, 0)
	length = int(r0)
	return
}

func GetWindowText(hWnd windows.HWND, lpString *uint16, maxCount int) (length int) {
	r0, _, _ := syscall.Syscall(procGetWindowTextW.Addr(), 3, uintptr(hWnd), uintptr(unsafe.Pointer(lpString)), uintptr(maxCount))
	length = int(r0)
	return
}

func IsIconic(hWnd windows.HWND) (iconic bool) {
	r0, _, _ := syscall.Syscall(procIsIconic.Addr(), 1, uintptr(hWnd), 0, 0)
	iconic = r0 != 0
	return
}

func IsWindowVisible(hWnd windows.HWND) (visible bool) {
	r0, _, _ := syscall.Syscall(procIsWindowVisible.Addr(), 1, uintptr(hWnd), 0, 0)
	visible = r0 != 0
	return
}
